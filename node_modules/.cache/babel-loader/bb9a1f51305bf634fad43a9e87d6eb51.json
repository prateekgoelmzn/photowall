{"ast":null,"code":"import _defineProperty from \"/home/pglinuxlite/Desktop/pgWorkSpace/ReactApp/photowall/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport post from '../data/posts';\nimport { combineReducers } from 'redux';\n\nfunction comments(state = {}, action) {\n  switch (action.type) {\n    case 'ADD_COMMENT':\n      if (!state[action.postId]) {\n        /* Checking whether there exist a comment or not for postId*/\n        return _objectSpread({}, state, {\n          [action.postId]: [action.comment]\n        });\n      } else {\n        /*if there exist a comment for a particular postId then add in it*/\n        return _objectSpread({}, state, {\n          [action.postId]: [...state[action.postId], action.comment]\n        });\n      }\n\n    case 'LOAD_COMMENTS':\n      return action.comments;\n\n    default:\n      return state;\n  }\n}\n\nfunction posts(state = post, action) {\n  switch (action.type) {\n    case 'REMOVE_POST':\n      return [...state.slice(0, action.index), ...state.slice(action.index + 1)];\n\n    case 'ADD_POST':\n      return [...state, action.post];\n\n    case 'LOAD_POSTS':\n      return action.posts;\n\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  posts,\n  comments\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/pglinuxlite/Desktop/pgWorkSpace/ReactApp/photowall/src/redux/reducer.js"],"names":["post","combineReducers","comments","state","action","type","postId","comment","posts","slice","index","rootReducer"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,eAAjB;AACA,SAAQC,eAAR,QAA8B,OAA9B;;AAEA,SAASC,QAAT,CAAkBC,KAAK,GAAC,EAAxB,EAA4BC,MAA5B,EAAmC;AAC/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,aAAL;AACA,UAAG,CAACF,KAAK,CAACC,MAAM,CAACE,MAAR,CAAT,EAAyB;AAAY;AACjC,iCAAWH,KAAX;AAAiB,WAACC,MAAM,CAACE,MAAR,GAAgB,CAACF,MAAM,CAACG,OAAR;AAAjC;AACH,OAFD,MAGI;AAAiC;AACjC,iCAAWJ,KAAX;AAAiB,WAACC,MAAM,CAACE,MAAR,GAAgB,CAAC,GAAGH,KAAK,CAACC,MAAM,CAACE,MAAR,CAAT,EAAyBF,MAAM,CAACG,OAAhC;AAAjC;AACH;;AAED,SAAK,eAAL;AAAuB,aAAOH,MAAM,CAACF,QAAd;;AAEvB;AAAU,aAAOC,KAAP;AAXd;AAaH;;AAED,SAASK,KAAT,CAAeL,KAAK,GAAGH,IAAvB,EAA4BI,MAA5B,EAAmC;AAE/B,UAAOA,MAAM,CAACC,IAAd;AACA,SAAK,aAAL;AAAqB,aAAO,CAAC,GAAGF,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAcL,MAAM,CAACM,KAArB,CAAJ,EAAgC,GAAGP,KAAK,CAACM,KAAN,CAAYL,MAAM,CAACM,KAAP,GAAa,CAAzB,CAAnC,CAAP;;AACrB,SAAK,UAAL;AAAkB,aAAO,CAAC,GAAGP,KAAJ,EAAUC,MAAM,CAACJ,IAAjB,CAAP;;AAClB,SAAK,YAAL;AAAoB,aAAOI,MAAM,CAACI,KAAd;;AACpB;AAAU,aAAOL,KAAP;AAJV;AAOH;;AAED,MAAMQ,WAAW,GAAGV,eAAe,CAAC;AAACO,EAAAA,KAAD;AAAQN,EAAAA;AAAR,CAAD,CAAnC;AAEA,eAAeS,WAAf","sourcesContent":["import post from '../data/posts';\nimport {combineReducers} from 'redux';\n\nfunction comments(state={}, action){\n    switch(action.type){\n        case 'ADD_COMMENT' : \n        if(!state[action.postId]){           /* Checking whether there exist a comment or not for postId*/\n            return {...state,[action.postId]:[action.comment]};\n        }\n        else{                                /*if there exist a comment for a particular postId then add in it*/\n            return {...state,[action.postId]:[...state[action.postId],action.comment]}\n        }\n\n        case 'LOAD_COMMENTS' : return action.comments\n        \n        default : return state;\n    }\n} \n\nfunction posts(state = post,action){\n\n    switch(action.type){\n    case 'REMOVE_POST' : return [...state.slice(0,action.index),...state.slice(action.index+1)];\n    case 'ADD_POST' : return [...state,action.post];\n    case 'LOAD_POSTS' : return action.posts\n    default : return state;\n    }\n\n}\n\nconst rootReducer = combineReducers({posts, comments})\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}